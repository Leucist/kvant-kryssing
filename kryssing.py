import telebot
from telebot.apihelper import ApiException

import config
import json

from telebot import types

bot = telebot.TeleBot(config.TOKEN)

countries = ["–õ–∞—Ç–≤–∏—è", "–ü–æ–ª—å—à–∞(–Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ)", "–õ–∏—Ç–≤–∞(–Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ)"]
methods = ['–ò–º—è', '–§–∞–º–∏–ª–∏—è', '–ì–æ–¥—ã –∂–∏–∑–Ω–∏']
adm_functions = ['–†–∞—Å—Å—ã–ª–∫–∞', '–ü—Ä–æ–≤–µ—Å—Ç–∏ –æ–ø—Ä–æ—Å', '–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ë–î']
personal_data = {}


# language_code –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —è–∑—ã–∫–∞~
# –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤–º–µ—à–∞—Ç—å—Å—è –≤ —Ä–∞–∑–≥–æ–≤–æ—Ä —Å –ø–æ–º–æ—â—å—é –∫–æ–Ω—Å–æ–ª–∏? –í—Ä—è–¥ –ª–∏ - —á–µ—Ä–µ–∑ —Å–µ—Ä–≤. –ê–∫–∞ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–µ —Å–æ–æ –æ —Ä–∞–±–æ—Ç–∞—Ö –∏–ª–∏ updt
# json.loads(data_base.write()) 0_o (?)
# def decision(func):
#     def wrapped(*args, **kwargs):
#         func(*args, **kwargs)
#         before_taking_decision(*args, **kwargs)
#     return wrapped
#
#
# def taking_decision(*args, **kwargs):
#     if args[0].text == "–î–∞":
#         return True
#     elif args[0].text == "–ù–µ—Ç":
#         return False
#
# # –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä –Ω–∞–¥ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–æ–º? –ü–æ—á–µ–º—É –±—ã –∏ –Ω–µ—Ç()
# def before_taking_decision(*args, **kwargs):
#     markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
#     item1 = types.KeyboardButton("–î–∞")
#     item2 = types.KeyboardButton("–ù–µ—Ç")
#     markup.add(item1, item2)
#     sent = bot.send_message(args[0].chat.id, "–ü—Ä–∏–Ω—è—Ç–æ.\n–ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫?", reply_markup=markup)
#     bot.register_next_step_handler(sent, taking_decision)
#     return before_taking_decision


@bot.message_handler(commands=['start'])
def start(message):
    sticker = open('static/welcome.tgs', 'rb')
    Person(message).initialisation()
    markup = back_markup()
    bot.send_sticker(message.chat.id, sticker)
    bot.send_message(message.chat.id,
                     "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π, {0.first_name}!\n–Ø - <b>{1.first_name}</b>, —á–∞—Ç-–±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–∑–¥–∞–Ω, —á—Ç–æ–±—ã –ø–æ–º–æ–≥–∞—Ç—å –ª—é–¥—è–º!".format(
                         message.from_user, bot.get_me()), parse_mode='html', reply_markup=markup)


@bot.message_handler(commands=['admin'])
def admin(message):
    if message.from_user.id == 1064282294:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        for function in adm_functions:
            item = types.KeyboardButton(function)
            markup.add(item)
        item = types.KeyboardButton("–ù–∞–∑–∞–¥ ‚û§")
        markup.add(item)
        sent = bot.send_message(message.chat.id, "–ß—Ç–æ –±—ã –í—ã —Ö–æ—Ç–µ–ª–∏ —Å–¥–µ–ª–∞—Ç—å?", reply_markup=markup)
        bot.register_next_step_handler(sent, admin_after)
    else:
        bot.send_message(message.chat.id, "–£ –í–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")


def admin_after(message):
    markup = back_markup()
    if message.from_user.id == 1064282294:
        if message.text == "–†–∞—Å—Å—ã–ª–∫–∞":
            sent = bot.send_message(message.chat.id, "–ö–∞–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –í—ã —Ö–æ—Ç–∏—Ç–µ —Ä–∞–∑–æ—Å–ª–∞—Ç—å?")
            bot.register_next_step_handler(sent, mailing)
        elif message.text == "–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ë–î":
            Person(message).show_database()
        elif message.text == '–ü—Ä–æ–≤–µ—Å—Ç–∏ –æ–ø—Ä–æ—Å':
            sent = bot.send_message(message.chat.id, "–û–ø—Ä–æ—Å –Ω–∞ –∫–∞–∫—É—é —Ç–µ–º—É –í—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–≤–µ—Å—Ç–∏?")
            bot.register_next_step_handler(sent, mailing, arguments=True)
        elif message.text == "–ù–∞–∑–∞–¥ ‚û§":
            bot.send_message(message.chat.id, "–ü—Ä–∏–Ω—è—Ç–æ.", reply_markup=markup)
    else:
        bot.send_message(message.chat.id, "–£ –í–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.",
                         reply_markup=markup)


@bot.message_handler(content_types=['text'])
def chat(message):
    sticker = open('static/welcome.tgs', 'rb')
    error_stick = open('static/error.tgs', 'rb')
    Person(message).initialisation()  # –∫–∞–∂–¥—ã–π —Ä–∞–∑. –°–¥–µ–ª–∞—Ç—å —ç—Ç–æ —Å—á–∞—Å—Ç—å–µ –Ω–∞ –æ–¥–∏–Ω —Ä–∞–∑ –Ω–µ –≤—ã—Ö–æ–¥–∏—Ç –ø–æ–∫–∞
    # keyboard
    markup = back_markup()
    if message.chat.type == 'private':
        # if message.from_user.id == 1064282294:
        if message.text.lower() == '–ø—Ä–∏–≤–µ—Ç':
            bot.send_sticker(message.chat.id, sticker)
            bot.send_message(message.chat.id,
                             "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π, {0.first_name}!\n–Ø - <b>{1.first_name}</b>, —á–∞—Ç-–±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–∑–¥–∞–Ω, —á—Ç–æ–±—ã –ø–æ–º–æ–≥–∞—Ç—å –ª—é–¥—è–º!".format(
                                 message.from_user, bot.get_me()), parse_mode='html', reply_markup=markup)

        elif message.text == '–ß—Ç–æ —Ç—ã —É–º–µ–µ—à—å?':
            bot.send_message(message.chat.id,
                             '–Ø –º–æ–≥—É –ø–æ–º–æ—á—å –í–∞–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–≤–æ—ë –≥–µ–Ω–µ–∞–ª–æ–≥–∏—á–µ—Å–∫–æ–µ –¥—Ä–µ–≤–æ, –Ω–∞–π—Ç–∏ —Å–≤–æ–∏ –µ–≤—Ä–æ–ø–µ–π—Å–∫–∏–µ –∫–æ—Ä–Ω–∏ (–ø—Ä–∏ –∏—Ö –Ω–∞–ª–∏—á–∏–∏), –∏—Ö —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ –∞—Ä—Ö–∏–≤–∞—Ö.')
            bot.send_message(message.chat.id, '–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ü–æ–º–æ–≥–∏ –º–Ω–µ üîç" –≤–Ω–∏–∑—É ‚Üì')

        elif message.text == '–ü–æ–º–æ–≥–∏ –º–Ω–µ üîç':
            markup = types.ReplyKeyboardMarkup(row_width=0.1)
            item1 = types.KeyboardButton("–î–∞–ª–µ–µ")
            for method in methods:
                item = types.KeyboardButton(method)
                markup.add(item)
            item2 = types.KeyboardButton("–ù–∞–∑–∞–¥ ‚û§")
            markup.add(item1, item2)

            bot.send_message(message.chat.id, '–•–æ—Ä–æ—à–æ, –¥–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º! –ü–æ –∫–∞–∫–æ–º—É –∫—Ä–∏—Ç–µ—Ä–∏—é –í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –∏—Å–∫–∞—Ç—å?',
                             reply_markup=markup)

        elif message.text == '–ù–∞–∑–∞–¥ ‚û§':
            markup = back_markup()
            bot.send_message(message.chat.id, "–ü—Ä–∏–Ω—è—Ç–æ.", reply_markup=markup)

        elif message.text.lower() == '–¥–∞–ª–µ–µ' or message.text.lower() == '–¥–∞–ª—å—à–µ':
            markup = types.ReplyKeyboardMarkup(row_width=0.1)
            for country in countries:
                item = types.KeyboardButton(country)
                markup.add(item)
            item = types.KeyboardButton("–ù–∞–∑–∞–¥ ‚û§")
            markup.add(item)
            sent = bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É, –≤ –∫–æ—Ç–æ—Ä–æ–π –±—É–¥–µ—Ç –æ—Å—É—â–µ—Å—Ç–≤–ª–µ–Ω –ø–æ–∏—Å–∫",
                                    reply_markup=markup)
            bot.register_next_step_handler(sent, country_chose, personal_data)

        elif message.text == '–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å':
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            item1 = types.KeyboardButton("2.99$")
            item2 = types.KeyboardButton("–ù–∞–∑–∞–¥ ‚û§")
            markup.add(item1, item2)
            sent = bot.send_message(message.chat.id, "–ù–∞ –∫–∞–∫—É—é —Å—É–º–º—É –í—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å?",
                                    reply_markup=markup)
            bot.register_next_step_handler(sent, pre_transactions)

        else:
            for method in methods:
                if message.text == method:
                    bot.send_message(message.chat.id, "(–î–∞–Ω–Ω—ã–µ —Å–ª–µ–¥—É–µ—Ç –≤–≤–æ–¥–∏—Ç—å –Ω–∞ —Ä–æ–¥–Ω–æ–º —è–∑—ã–∫–µ)")
                    bot.send_message(message.chat.id,
                                     "(–ü—Ä–∏–º–µ—Ä–Ω—ã–µ –≥–æ–¥—ã –∂–∏–∑–Ω–∏ —Å–ª–µ–¥—É–µ—Ç –≤–≤–æ–¥–∏—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ XXXX-XXXX (–ø—Ä–∏–º.: 1800-1900))")
                    sent = bot.send_message(message.chat.id, method + " –∏—Å–∫–æ–º–æ–π –ª–∏—á–Ω–æ—Å—Ç–∏:")
                    bot.register_next_step_handler(sent, receiving_data, method)
                    break

            else:
                markup = back_markup()
                bot.send_sticker(message.chat.id, error_stick)
                bot.send_message(message.chat.id,
                                 '–Ø –Ω–∏–∫–∞–∫ –Ω–µ –º–æ–≥—É –í–∞—Å –ø–æ–Ω—è—Ç—å. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫ –∏ —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º!',
                                 reply_markup=markup)
        # else:  # –Ω–∞ –≤—Ä–µ–º—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
        #     bot.send_sticker(message.chat.id, sticker)
        #     bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç!")
        #     bot.send_message(message.chat.id,
        #                      "–î–∞–Ω–Ω—ã–π –±–æ—Ç —Å–µ–π—á–∞—Å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ —Å—Ç–∞–¥–∏–∏ –¥–æ—Ä–∞–±–æ—Ç–∫–∏, —Ç–∞–∫ —á—Ç–æ –µ–≥–æ —Ñ—É–Ω–∫—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–º–æ—Ä–æ–∂–µ–Ω—ã." +
        #                      "\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ :)")


def country_chose(message, personal_data):
    for country in countries:
        if message.text == country:
            if country == '–õ–∞—Ç–≤–∏—è':
                c = 'LVA'
            elif country == '–ü–æ–ª—å—à–∞':
                c = 'POL'
            elif country == '–õ–∏—Ç–≤–∞':
                c = 'LTU'
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            item1 = types.KeyboardButton("–î–∞")
            item2 = types.KeyboardButton("–ù–µ—Ç")
            markup.add(item1, item2)
            sent = bot.send_message(message.chat.id, "–ü—Ä–∏–Ω—è—Ç–æ.\n–ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫?", reply_markup=markup)
            bot.register_next_step_handler(sent, search, personal_data, c)


def receiving_data(message, method):
    personal_data[method] = message.text
    bot.send_message(message.chat.id, '–ü—Ä–∏–Ω—è—Ç–æ.\n–ß—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å ' + method.lower() + ' –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ "' + method +
                     '" –µ—â–µ —Ä–∞–∑.\n–ó–Ω–∞–µ—Ç–µ –¥—Ä—É–≥—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é? –¢–æ–≥–¥–∞ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –¥—Ä—É–≥—É—é –∫–Ω–æ–ø–∫—É‚Üì\n–ï—Å–ª–∏ —ç—Ç–æ –≤—Å–µ, –Ω–∞–ø–∏—à–∏—Ç–µ "–î–∞–ª–µ–µ"')


def search(message, personal_data, country):  # –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Å–µ –Ω–∞—Ö—Ä–µ–Ω
    error_stick = open('static/error.tgs', 'rb')
    result = []
    if message.text == "–î–∞":
        if country == "LVA":
            for var in range(1):  # +–∫–æ—Å—Ç—ã–ª—å()
                with open("LVA-archive.json", "r", encoding="UTF-8") as source_file:
                    data = json.loads(source_file.read())
                    if "–ì–æ–¥—ã –∂–∏–∑–Ω–∏" in personal_data:
                        try:
                            first = int(personal_data["–ì–æ–¥—ã –∂–∏–∑–Ω–∏"][:4])
                            last = int(personal_data["–ì–æ–¥—ã –∂–∏–∑–Ω–∏"][5:])
                        except ValueError:
                            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
                            item = types.KeyboardButton("–ù–∞–∑–∞–¥ ‚û§")
                            markup.add(item)
                            bot.send_sticker(message.chat.id, error_stick)
                            bot.send_message(message.chat.id,
                                             "–î–æ–ø—É—â–µ–Ω–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ –¥–∞–Ω–Ω—ã—Ö.\n–ì–æ–¥—ã –∂–∏–∑–Ω–∏ –≤–≤–µ–¥–µ–Ω—ã –Ω–µ–≤–µ—Ä–Ω–æ (–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç).\n" +
                                             "(–ü—Ä–∏–º–µ—Ä–Ω—ã–µ –≥–æ–¥—ã –∂–∏–∑–Ω–∏ —Å–ª–µ–¥—É–µ—Ç –≤–≤–æ–¥–∏—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ XXXX-XXXX (–ø—Ä–∏–º.: 1800-1900))",
                                             reply_markup=markup)
                            break
                    for j in range(len(data)):
                        for i in data['item' + str(j)]:
                            variable = 0
                            try:
                                bdate = int(i["–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è"][:4])
                            except ValueError:
                                bdate = 0
                            for key1 in personal_data:
                                for key2 in i:
                                    if key1 == key2:
                                        try:
                                            if personal_data[key1] == i[key1] and (
                                                    first <= bdate <= last or bdate == 0):
                                                variable += 1
                                                for key in i:
                                                    if i[key] == " ":
                                                        i[key] = "–ù–µ —É–∫–∞–∑–∞–Ω–æ."
                                            else:
                                                variable -= 1
                                        except UnboundLocalError:
                                            if personal_data[key1] == i[key1]:
                                                variable += 1
                                                for key in i:
                                                    if i[key] == " ":
                                                        i[key] = "–ù–µ —É–∫–∞–∑–∞–Ω–æ."
                                            else:
                                                variable -= 1
                                        break
                            if variable > 0:
                                result.append(i)
                    Person(message).search_made(0)
                    if not result:
                        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
                        item = types.KeyboardButton("–ù–∞–∑–∞–¥ ‚û§")
                        markup.add(item)
                        bot.send_message(message.chat.id,
                                         "–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.\n–í–æ–∑–º–æ–∂–Ω–æ, –¥–∞–Ω–Ω—ã—Ö –æ —Ç–∞–∫–æ–º —á–µ–ª–æ–≤–µ–∫–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –¥–æ–ø—É—â–µ–Ω–∞ –æ—à–∏–±–∫–∞ –≤–æ –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.",
                                         reply_markup=markup)
                    else:
                        # money = Person(message).transactions(0)
                        # if money >= 2.99:
                        Person(message).search_made(1)
                        #     Person(message).transactions(-1, 2.99)
                        bot.send_message(message.chat.id, "–í–æ—Ç —Å–ø–∏—Å–æ–∫ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –ª—é–¥–µ–π, –∫–æ—Ç–æ—Ä—ã—Ö –í—ã –∏—â–µ—Ç–µ:",
                                         reply_markup=None)
                        variable = 0
                        with open("s-results/result" + str(message.from_user.id) + ".txt", "w",
                                  encoding='UTF-8') as result_file:
                            for i in result:
                                variable += 1
                                result_file.write(str(variable) + ') ' + "\n–ò–º—è: " + i['–ò–º—è'] + "\n–§–∞–º–∏–ª–∏—è: " + i[
                                    '–§–∞–º–∏–ª–∏—è'] + "\n–û—Ç—á–µ—Å—Ç–≤–æ: " + i['–û—Ç—á–µ—Å—Ç–≤–æ'] + "\n–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: " + i[
                                                      '–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è'] + "\n–ú–µ—Å—Ç–æ —Ä–æ–∂–¥–µ–Ω–∏—è: " + i[
                                                      '–ú–µ—Å—Ç–æ —Ä–æ–∂–¥–µ–Ω–∏—è'] + "\n–ú–µ—Å—Ç–æ –ø—Ä–∏–ø–∏—Å–∫–∏: " + i[
                                                      '–ú–µ—Å—Ç–æ –ø—Ä–∏–ø–∏—Å–∫–∏'] + '\n\n')
                        with open("s-results/result" + str(message.from_user.id) + ".txt", "r",
                                  encoding='UTF-8') as result_file:
                            bot.send_document(message.chat.id, result_file)
                            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
                            item = types.KeyboardButton("–ù–∞–∑–∞–¥ ‚û§")
                            markup.add(item)
                            bot.send_message(message.chat.id, "–§–∞–π–ª —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –í–∞—à–µ–≥–æ –ø–æ–∏—Å–∫–∞.",
                                             reply_markup=markup)
                        # else:
                        #     markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
                        #     item1 = types.KeyboardButton("–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å")
                        #     item2 = types.KeyboardButton("–ù–∞–∑–∞–¥ ‚û§")
                        #     markup.add(item1, item2)
                        #     bot.send_message(message.chat.id,
                        #                      "–ü–æ –í–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –±—ã–ª –Ω–∞–π–¥–µ–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç.\n–û–¥–Ω–∞–∫–æ –Ω–∞ –í–∞—à–µ–º —Å—á–µ—Ç—É –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤, —á—Ç–æ–±—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –µ–≥–æ.\n" +
                        #                      '–ù–∞–ø–∏—à–∏—Ç–µ "–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å" –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å.'
                        #                      + "\n–ù–∞ –í–∞—à–µ–º —Å—á–µ—Ç—É –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç " + str(2.99 - money)[:4] + "$",
                        #                      reply_markup=markup)
        elif country == "POL" or country == "LTU":
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            item = types.KeyboardButton("–ù–∞–∑–∞–¥ ‚û§")
            markup.add(item)
            bot.send_message(message.chat.id, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ–∏—Å–∫ –≤ –∞—Ä—Ö–∏–≤–∞—Ö –¥–∞–Ω–Ω—ã—Ö –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤ –µ—â–µ –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω.",
                             reply_markup=markup)
    elif message.text == "–ù–µ—Ç":
        markup = back_markup()
        bot.send_message(message.chat.id, "–ü—Ä–∏–Ω—è—Ç–æ.", reply_markup=markup)


def database_write(data):
    with open("data_base.json", "w", encoding="UTF-8") as database:
        json.dump(data, database, indent=1, ensure_ascii=False, separators=(',', ':'))


class Person:
    def __init__(self, message):
        self.message = message
        self.pid = message.from_user
        self.id_number = self.pid.id
        # self.database_read = open("data_base.json", "r", encoding="UTF-8")
        # self.data = json.loads(self.database_read.read())

    def initialisation(self):
        all_data = {}
        with open("data_base.json", "r", encoding="UTF-8") as database:
            data = json.loads(database.read())
            for i in data['users']:
                if i['id'] == self.id_number:
                    break
            else:
                amount = int(data['items']) + 1
                data = data['users']
                user = {"id": self.id_number, "first_name": self.pid.first_name, "last_name": self.pid.last_name,
                        "username": self.pid.username, "money": 0, "search_count": 0, "search_count_success": 0,
                        "is_bot": self.pid.is_bot}
                data.append(user)
                all_data['items'] = amount
                all_data['users'] = data
                database_write(all_data)

    def show_database(self):
        try:
            with open("data_base.json", "r", encoding="UTF-8") as database_file:
                bot.send_document(self.message.chat.id, database_file)
        except FileNotFoundError:
            bot.send_message(self.message.chat.id, "[–û—à–∏–±–∫–∞] –§–∞–π–ª –ë–î –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=None)

    def transactions(self, *args):
        direction = args[0]
        try:
            amount = args[1]
        except IndexError:
            pass
        with open("data_base.json", "r", encoding="UTF-8") as database:
            data = json.loads(database.read())
            for i in data['users']:
                if i['id'] == self.id_number:
                    if direction == 1:  # –î–æ–±–∞–≤–∏—Ç—å/–ø–æ–ª–æ–∂–∏—Ç—å
                        pass  # –ù—É–∂–Ω–æ –ø—Ä–∏–∫—Ä—É—Ç–∏—Ç—å –æ–ø–ª–∞—Ç—É
                    elif direction == -1:  # –ü–æ—Ç—Ä–∞—Ç–∏—Ç—å/—Å–Ω—è—Ç—å
                        i['money'] = i['money'] - amount
                    elif direction == 0:  # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—á–µ—Ç
                        return i['money']
                    database_write(data)
                    # bot.send_message(self.message.chat.id, "–£ –í–∞—Å –Ω–∞ —Å—á–µ—Ç—É " + str(i['money']) + "$")

    def search_made(self, variable):
        with open("data_base.json", "r", encoding="UTF-8") as database:
            data = json.loads(database.read())
            for i in data['users']:
                if i['id'] == self.id_number:
                    if variable == 0:
                        i['search_count'] += 1
                    elif variable == 1:
                        i['search_count_success'] += 1
                    database_write(data)

    ########### useless ####### we need to use it ################################################
    def database(self):
        with open("data_base.json", "r", encoding="UTF-8") as database:
            data = json.loads(database.read())
            for i in data['users']:
                if i['id'] == self.id_number:
                    return data, i
            else:
                return data


##############################################################################################


def mailing(message, arguments=None):
    markup = back_markup()
    if message.text == "–ù–∞–∑–∞–¥ ‚û§":
        bot.send_message(message.chat.id, "–ü—Ä–∏–Ω—è—Ç–æ.", reply_markup=markup)
        return -1
    with open("data_base.json", "r", encoding="UTF-8") as database:
        data = json.loads(database.read())
        if arguments:
            for person in data['users']:
                try:
                    if person['id'] != message.from_user.id:
                        sent = bot.send_message(person['id'], message.text, reply_markup=markup)
                        bot.register_next_step_handler(sent, feedback, message.text)
                    else:
                        bot.send_message(message.chat.id, "–ü—Ä–∏–Ω—è—Ç–æ.", reply_markup=markup)
                except ApiException:
                    continue
                else:
                    continue
            return 0
        if message.content_type == 'text':
            for person in data['users']:
                try:
                    if person['id'] != message.from_user.id:
                        bot.send_message(person['id'], message.text, reply_markup=markup)
                    else:
                        bot.send_message(message.chat.id, "–ü—Ä–∏–Ω—è—Ç–æ.", reply_markup=markup)
                except ApiException:
                    continue
                else:
                    continue
            bot.send_message(message.chat.id, "–†–∞–∑–æ—Å–ª–∞–Ω–æ.", reply_markup=markup)
        elif message.content_type == 'photo':
            raw = message.photo[2].file_id
            name = "mailing.jpg"
            file_info = bot.get_file(raw)
            downloaded_file = bot.download_file(file_info.file_path)
            with open(name, "wb") as photo:
                photo.write(downloaded_file)
            for person in data['users']:
                photo = open(name, "rb")
                try:
                    if person['id'] != message.from_user.id:
                        bot.send_photo(person['id'], photo, reply_markup=markup)
                    else:
                        bot.send_message(message.chat.id, "–ü—Ä–∏–Ω—è—Ç–æ.", reply_markup=markup)
                except ApiException:
                    photo.close()
                    continue
                else:
                    photo.close()
                    continue
            bot.send_message(message.chat.id, "–†–∞–∑–æ—Å–ª–∞–Ω–æ.", reply_markup=markup)
        elif message.content_type == 'document':
            raw = message.document.file_id
            name = "mailing" + message.document.file_name[-4:]
            file_info = bot.get_file(raw)
            downloaded_file = bot.download_file(file_info.file_path)
            with open(name, "wb") as document:
                document.write(downloaded_file)
            for person in data['users']:
                document = open(name, "rb")
                try:
                    if person['id'] != message.from_user.id:
                        bot.send_document(person['id'], document, reply_markup=markup)
                    else:
                        bot.send_message(message.chat.id, "–ü—Ä–∏–Ω—è—Ç–æ.", reply_markup=markup)
                except ApiException:
                    document.close()
                    continue
                else:
                    document.close()
                    continue
            bot.send_message(message.chat.id, "–†–∞–∑–æ—Å–ª–∞–Ω–æ.", reply_markup=markup)
        else:
            bot.send_message(message.chat.id, "–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞", reply_markup=markup)


def feedback(message, question):
    bot.send_message(1064282294,
                     '–û—Ç–≤–µ—Ç –Ω–∞ –í–∞—à –≤–æ–ø—Ä–æ—Å "' + question + '" ‚Äî "' + message.text + '" –æ—Ç:\n(id) ' + str(message.from_user.id) + ',\n(name) '
                     + str(message.from_user.first_name))
    bot.send_message(message.chat.id, "–ü—Ä–∏–Ω—è—Ç–æ.\n–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –æ—Ç–≤–µ—Ç!)")


def pre_transactions(message):
    input_amount = message.text
    try:
        amount = float(input_amount)
        bot.send_message(message.chat.id, "–ü—Ä–∏–Ω—è—Ç–æ.")
        # Person(message).transactions(1, amount)
    except ValueError:
        amount = ""
        chars = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, '.']  # '.' –∏ ',' ‚Äî –¥–ª—è float(?)
        for i in input_amount:
            try:
                i = int(i)
            except ValueError:
                pass
            for j in range(len(chars)):
                if i == chars[j]:
                    amount = amount + str(i)
                elif i == ',':
                    amount = amount + '.'
                    break
        try:
            amount = float(amount)
            bot.send_message(message.chat.id, "–ü—Ä–∏–Ω—è—Ç–æ.")
            # Person(message).transactions(1, amount)
        except ValueError:
            bot.send_message(message.chat.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å—É–º–º—ã.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            item1 = types.KeyboardButton("2.99$")
            item2 = types.KeyboardButton("–ù–∞–∑–∞–¥ ‚û§")
            markup.add(item1, item2)  # –û–Ω –≤—Å–µ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —ç—Ç–æ –∑–∞ —Å–ª–æ–≤–∞—Ä—å, —è —Ö–∑, —á—Ç–æ —Å –Ω–∏–º.
            sent = bot.send_message(message.chat.id, "–ù–∞ –∫–∞–∫—É—é —Å—É–º–º—É –í—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å?",
                                    reply_markup=markup)
            bot.register_next_step_handler(sent, pre_transactions)
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton("–î–∞")
    item2 = types.KeyboardButton("–ù–µ—Ç")
    markup.add(item1, item2)
    sent = bot.send_message(message.chat.id,
                            "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ø–æ–ª–Ω–∏—Ç—å —Å–≤–æ–π –±–∞–ª–∞–Ω—Å –Ω–∞ " + str(amount) + "$?",
                            reply_markup=markup)
    bot.register_next_step_handler(sent, decision, amount)


def decision(message, amount):
    if message.text == "–î–∞":
        bot.send_message(message.chat.id, "–ü—Ä–∏–Ω—è—Ç–æ.")
        Person(message).transactions(1, amount)
    elif message.text == "–ù–µ—Ç":
        bot.send_message(message.chat.id, "–ü—Ä–∏–Ω—è—Ç–æ.")


def back_markup():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton("–ß—Ç–æ —Ç—ã —É–º–µ–µ—à—å?")
    item2 = types.KeyboardButton("–ü–æ–º–æ–≥–∏ –º–Ω–µ üîç")
    markup.add(item1, item2)
    return markup


def compose_letter():
    pass


bot.polling(none_stop=True)
